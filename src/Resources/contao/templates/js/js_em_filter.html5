<script>
    let EstateManager = {
        <?= ContaoEstateManager\FilterToggle::getEstateManagerConfig(); ?>
    };
</script>
<script>
    class EMFilter
    {
        constructor(options)
        {
            // Destroy any existing initializations
            this._destroy();

            this.options = this._extend(true,
                {
                    addBlankMarketingType: false,
                    addBlankRealEstateType: false,
                    submitOnChange: false,
                    fields: {
                        marketingType: 'select.real-estate-marketing-type',
                        realEstateType: 'select.real-estate-type',
                        toggleFilter: '.real-estate-filter',
                        resetButton: '.widget-reset .reset'
                    },
                    filter: []
                }, options || {});

            // Feature test
            this.supports = !!document.querySelector;

            // Feature test and availability
            if (!this.supports || !document.querySelector(options.selector))
            {
                return;
            }

            this.form = document.querySelector(this.options.selector);

            this.fieldMarketingType = document.querySelector(this.options.selector + ' ' + this.options.fields.marketingType);
            this.fieldRealEstateType = document.querySelector(this.options.selector + ' ' + this.options.fields.realEstateType);

            this.typeOptionList = this.fieldRealEstateType.cloneNode(true);

            this.toggleFilter = document.querySelectorAll(this.options.selector + ' ' + this.options.fields.toggleFilter);
            this.buttonReset = document.querySelector(this.options.selector + ' ' + this.options.fields.resetButton);

            this._registerEvents();
            this._checkMarketingType();
        }

        _registerEvents()
        {
            if(!!this.fieldMarketingType)
            {
                this.fieldMarketingType.addEventListener('change', this._checkMarketingType.bind(this), false);
            }

            if(!!this.fieldRealEstateType)
            {
                this.fieldRealEstateType.addEventListener('change', this._realEstateTypeChanged.bind(this), false);
            }

            if(!!this.buttonReset)
            {
                this.buttonReset.addEventListener('click', this._resetFilter.bind(this), false);
            }
        }

        _checkMarketingType()
        {
            // Get selected value
            const previousValue = this.fieldRealEstateType.value;
            // Recreate options list
            this.fieldRealEstateType.options.length = 0;
            this.fieldRealEstateType.innerHTML = this.typeOptionList.innerHTML;

            let similarType = this.options.addBlankRealEstateType ? (EstateManager.types[previousValue] ? EstateManager.types[previousValue].switchType : 0) : EstateManager.types[previousValue].switchType;
            let typeOptions = this.fieldRealEstateType.options;

            if (!similarType && (this.fieldMarketingType.value !== this.fieldRealEstateType.selectedOptions[0].dataset.marketingType && this.fieldMarketingType.value))
            {
                typeOptions[0].selected = true;
                this._realEstateTypeChanged();
            }

            if (this.fieldMarketingType.value)
            {
                for (let i = typeOptions.length - 1; i > -1; i--)
                {
                    if (!!typeOptions[i].dataset.marketingType && typeOptions[i].dataset.marketingType !== this.fieldMarketingType.value)
                    {
                        typeOptions.remove(i);
                    }
                    else if(similarType.toString() === typeOptions[i].value)
                    {
                        typeOptions[i].selected = true;
                        this._realEstateTypeChanged();
                    }
                }
            }
        }

        _realEstateTypeChanged()
        {
            if (this.options.submitOnChange)
            {
                if ('' !== this.fieldRealEstateType.value)
                {
                    this.form.submit();
                }
            }
            else
            {
                for (let i = 0; i < this.toggleFilter.length; i++)
                {
                    if (this.fieldRealEstateType.selectedOptions[0].value && 'miete_leasing' !== this.fieldRealEstateType.selectedOptions[0].value && 'kauf_erbpacht' !== this.fieldRealEstateType.selectedOptions[0].value )
                    {
                        if (EstateManager.types[this.fieldRealEstateType.selectedOptions[0].value].filter.indexOf(this.toggleFilter[i].dataset.group) >= 0)
                        {
                            this.toggleFilter[i].style.display = '';
                        }
                        else
                        {
                            this.toggleFilter[i].style.display = 'none';
                        }
                    }
                    else
                    {
                        if (this.options.filter.indexOf(this.toggleFilter[i].dataset.group) >= 0)
                        {
                            this.toggleFilter[i].style.display = '';
                        }
                        else
                        {
                            this.toggleFilter[i].style.display = 'none';
                        }
                    }
                }
            }
        }

        _resetFilter(event)
        {
            event.preventDefault();

            for (let i = 0; i < this.form.elements.length; i++)
            {
                if ('hidden' !== this.form.elements[i].type)
                {
                    if ('country' === this.form.elements[i].name || this.options.submitOnChange && ('marketing-type' === this.form.elements[i].name || 'real-estate-type' === this.form.elements[i].name))
                    {
                        continue;
                    }

                    this.form.elements[i].value = '';

                    if ("createEvent" in document)
                    {
                        let evt = document.createEvent("HTMLEvents");
                        evt.initEvent("change", false, true);
                        this.form.elements[i].dispatchEvent(evt);
                    }
                    else
                    {
                        this.form.elements[i].fireEvent("onchange");
                    }
                }
            }

            document.querySelector(this.options.selector + ' .widget-reset .reset-flag').value = 1;
        }

        _extend()
        {
            let extended = {};
            let deep = false;
            let i = 0;
            let length = arguments.length;

            // Check if a deep merge
            if ('[object Boolean]' === Object.prototype.toString.call(arguments[0]))
            {
                deep = arguments[0];
                i++;
            }

            // Merge the object into the extended object
            let merge = (obj) =>
            {
                for ( let prop in obj )
                {
                    if ( Object.prototype.hasOwnProperty.call(obj, prop))
                    {
                        // If deep merge and property is an object, merge properties
                        if ('[object Object]' === deep && Object.prototype.toString.call(obj[prop]))
                        {
                            extended[prop] = this.extend( true, extended[prop], obj[prop]);
                        }
                        else
                        {
                            extended[prop] = obj[prop];
                        }
                    }
                }
            }

            // Loop through each object and conduct a merge
            for ( ; i < length; i++)
            {
                let obj = arguments[i];
                merge(obj);
            }

            return extended;
        }

        _destroyEvents()
        {
            if(this.fieldMarketingType)
            {
                this.fieldMarketingType.removeEventListener('change', this._marketingTypeChanged, false);
            }

            if(this.fieldRealEstateType)
            {
                this.fieldRealEstateType.removeEventListener('change', this._realEstateTypeChanged, false);
            }
        }

        _destroy()
        {
            if(!this.options)
            {
                return;
            }

            this.options = null;
            this._destroyEvents();
        }
    }

    document.addEventListener("DOMContentLoaded", function()
    {
        let estateManagerFilter = [];

        for(let id in EstateManager.filters)
        {
            let settings = EstateManager.filters[id];
            settings.selector = 'form[data-filter-id="'+id+'"]';

            estateManagerFilter[id] = new EMFilter(settings);
        }
    })

</script>
