<script>
    var EstateManager = {
<?= ContaoEstateManager\FilterToggle::getEstateManagerConfig(); ?>
    };
</script>
<script>
  var EstateManagerFilter = (function () {

      'use strict';

      var EstateManagerFilter = function (options) {
          this.supports = !!document.querySelector; // Feature test

          // feature test and availability
          if (!this.supports || !document.querySelector(options.selector)) return;

          // Destroy any existing initializations
          this.destroy();

          this.defaults = {
              filter: [],
              submitOnChange: false
          };

          // Merge user options with defaults
          this.settings = this.extend(true, this.defaults, options || {});

          this.form = document.querySelector(this.settings.selector);
          this.fieldMarketingType = document.querySelector(this.settings.selector + ' select.real-estate-marketing-type');
          this.fieldRealEstateType = document.querySelector(this.settings.selector + ' select.real-estate-type');
          this.toggleFilter = document.querySelectorAll(this.settings.selector + ' .real-estate-filter');
          this.buttonReset = document.querySelector(this.settings.selector + ' .widget-reset .reset');

          // Set all event listener
          this.setEventListener();
      };

      EstateManagerFilter.prototype.destroy = function () {
          // If plugin isn't already initialized, stop
          if (!this.settings) return;

          // Reset variables
          this.settings = null;

          // Remove all event listener
          this.removeEventListener();
      };

      EstateManagerFilter.prototype.setEventListener = function () {
          if (this.fieldMarketingType)  this.fieldMarketingType.addEventListener('change', this.marketingTypeChanged.bind(this), false);
          if (this.fieldRealEstateType) this.fieldRealEstateType.addEventListener('change', this.realEstateTypeChanged.bind(this), false);
          if (this.buttonReset) this.buttonReset.addEventListener('click', this.resetFilter.bind(this), false);
      };

      EstateManagerFilter.prototype.removeEventListener = function () {
          if (this.fieldMarketingType)  this.fieldMarketingType.removeEventListener('change', this.marketingTypeChanged, false);
          if (this.fieldRealEstateType) this.fieldRealEstateType.removeEventListener('change', this.realEstateTypeChanged, false);
      };

      EstateManagerFilter.prototype.marketingTypeChanged = function () {
          var switchType = EstateManager.types[this.fieldRealEstateType.value].switchType;

          if (!switchType && (this.fieldRealEstateType.selectedOptions[0].dataset.marketingType != this.fieldMarketingType.value && this.fieldMarketingType.value)) {
              this.fieldRealEstateType.options[0].selected = true;
              this.realEstateTypeChanged();
          }

          for (var i=1; i<this.fieldRealEstateType.options.length;i++) {
              if (this.fieldMarketingType.value) {
                  if (this.fieldRealEstateType.options[i].dataset.marketingType === this.fieldMarketingType.value) {
                      this.fieldRealEstateType.options[i].style.display = 'initial';
                      if (this.fieldRealEstateType.options[i].value == switchType) {
                          this.fieldRealEstateType.options[i].selected = true;
                          this.realEstateTypeChanged();
                      }
                  } else {
                      this.fieldRealEstateType.options[i].style.display = 'none';
                  }
              } else {
                  this.fieldRealEstateType.options[i].style.display = '';
              }
          }
      };

      EstateManagerFilter.prototype.realEstateTypeChanged = function () {
          if (this.settings.submitOnChange) {
              if (this.fieldRealEstateType.value !== '') {
                  this.form.submit();
              }
          } else {
              for (var i=0; i<this.toggleFilter.length; i++) {
                  if (this.fieldRealEstateType.selectedOptions[0].value && this.fieldRealEstateType.selectedOptions[0].value !== 'miete_leasing' && this.fieldRealEstateType.selectedOptions[0].value !== 'kauf_erbpacht') {
                      if (EstateManager.types[this.fieldRealEstateType.selectedOptions[0].value].filter.indexOf(this.toggleFilter[i].dataset.group) >= 0) {
                          this.toggleFilter[i].style.display = '';
                      } else {
                          this.toggleFilter[i].style.display = 'none';
                      }
                  } else {
                      if (this.settings.filter.indexOf(this.toggleFilter[i].dataset.group) >= 0) {
                          this.toggleFilter[i].style.display = '';
                      } else {
                          this.toggleFilter[i].style.display = 'none';
                      }
                  }
              }
          }
      };

      EstateManagerFilter.prototype.resetFilter = function (event) {
          event.preventDefault();
          for (var i=0; i<this.form.elements.length; i++) {
              if (this.form.elements[i].type !== 'hidden') {
                  if (this.form.elements[i].name === 'country' || this.settings.submitOnChange && (this.form.elements[i].name === 'marketing-type' || this.form.elements[i].name === 'real-estate-type')) {
                      continue;
                  }
                  this.form.elements[i].value = '';
                  if ("createEvent" in document) {
                      var evt = document.createEvent("HTMLEvents");
                      evt.initEvent("change", false, true);
                      this.form.elements[i].dispatchEvent(evt);
                  } else this.form.elements[i].fireEvent("onchange");
              }
          }
          document.querySelector(this.settings.selector + ' .widget-reset .reset-flag').value = 1;
      };

      EstateManagerFilter.prototype.extend = function () {
          var extended = {};
          var deep = false;
          var i = 0;
          var length = arguments.length;

          // Check if a deep merge
          if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {
              deep = arguments[0];
              i++;
          }

          // Merge the object into the extended object
          var merge = function (obj) {
              for ( var prop in obj ) {
                  if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {
                      // If deep merge and property is an object, merge properties
                      if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {
                          extended[prop] = this.extend( true, extended[prop], obj[prop] );
                      } else {
                          extended[prop] = obj[prop];
                      }
                  }
              }
          };

          // Loop through each object and conduct a merge
          for ( ; i < length; i++ ) {
              var obj = arguments[i];
              merge(obj);
          }

          return extended;
      };

      return EstateManagerFilter;
  })();

    document.addEventListener("DOMContentLoaded", function(event) {
        var estateManagerFilter = [];

        for(var id in EstateManager.filters){
            var settings = EstateManager.filters[id];
                settings.selector = 'form[data-filter-id="'+id+'"]';

            estateManagerFilter[id] = new EstateManagerFilter(settings);
        }
    });
</script>
